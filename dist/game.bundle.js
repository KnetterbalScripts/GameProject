(()=>{"use strict";class t{static saveKey="clickRPG_saveGame";static saveGame(t){if(!t)return!1;try{const e={stats:{name:t.stats.name||"Hero",health:t.stats.health||100,maxHealth:t.stats.maxHealth||100,gold:t.stats.gold||0,xp:t.stats.xp||0,level:t.stats.level||1},equipment:{weapon:t.equipment.weapon?{name:t.equipment.weapon.name,damage:t.equipment.weapon.damage,sprite:t.equipment.weapon.sprite,isDefault:t.equipment.weapon.isDefault,cost:t.equipment.weapon.cost}:{name:"Fists",damage:1,sprite:"fist.png",isDefault:!0,cost:0}},inventory:t.inventory?t.inventory.map((t=>({name:t.name,damage:t.damage,cost:t.cost,sprite:t.sprite,amount:t.amount||1,isEquipped:t.isEquipped||!1}))):[]},a={version:"1.0",timestamp:(new Date).toISOString(),data:e};return localStorage.setItem(this.saveKey,JSON.stringify(a)),console.log("Game saved successfully:",a),!0}catch(t){return console.error("Failed to save game:",t),!1}}static loadGame(){try{const t=localStorage.getItem(this.saveKey);if(!t)return console.log("No saved game found"),null;const e=JSON.parse(t);if(console.log("Loaded save data:",e),e.player||!e.data){const t=e.player||e;return{stats:t.stats||{},equipment:{weapon:t.equipment?.weapon||{name:"Fists",damage:1,sprite:"fist.png",isDefault:!0}},inventory:Array.isArray(t.inventory)?t.inventory:[]}}return e.data}catch(t){return console.error("Failed to load save:",t),null}}static clearSave(){try{return localStorage.removeItem(this.saveKey),console.log("Save data cleared"),!0}catch(t){return console.error("Failed to clear save:",t),!1}}}class e{constructor(t){this.name=t.name,this.damage=t.damage||0,this.cost=t.cost||0,this.sprite=t.sprite.endsWith(".png")?t.sprite:t.sprite+".png",this.amount=t.amount||1}getSellPrice(){return Math.floor(.5*this.cost)}clone(){return new e({name:this.name,damage:this.damage,cost:this.cost,sprite:this.sprite,amount:this.amount})}}const a=[new e({name:"Bronze Longsword",damage:5,cost:25,sprite:"BronzeLongsword"}),new e({name:"Rune Scimitar",damage:10,cost:50,sprite:"RuneScim"}),new e({name:"Dragon Battleaxe",damage:15,cost:100,sprite:"DBattleaxe"}),new e({name:"Magic Shortbow",damage:20,cost:150,sprite:"MagicShortbow"}),new e({name:"Trident Of The Swamps",damage:25,cost:200,sprite:"ToxicTrident"}),new e({name:"Scythe Of Vitur",damage:40,cost:500,sprite:"ScytheOfVitur"}),new e({name:"Twisted Bow",damage:50,cost:1e3,sprite:"Tbow"}),new e({name:"Tumekens's Shadow",damage:70,cost:1250,sprite:"Tumekens"})];new e({name:"Dragonhide",cost:10,sprite:"Dragonhide",type:"supply"}),new e({name:"Rune Ore",cost:15,sprite:"RuneOre",type:"supply"}),new e({name:"Magic Logs",cost:20,sprite:"MagicLogs",type:"supply"}),new e({name:"Dragon Bones",cost:25,sprite:"DragonBones",type:"supply"});class n{constructor(){const a=t.loadGame();a&&a.stats&&a.equipment&&Array.isArray(a.inventory)?(this.stats={name:a.stats.name||"Hero",health:a.stats.health||100,maxHealth:a.stats.maxHealth||100,gold:a.stats.gold||0,xp:a.stats.xp||0,level:a.stats.level||1},this.equipment={weapon:a.equipment.weapon||{name:"Fists",damage:1,sprite:"./dist/afbeeldingen/fist.png",isDefault:!0}},this.inventory=a.inventory.map((t=>new e({name:t.name||"",damage:t.damage||0,cost:t.cost||0,sprite:t.sprite||"",amount:t.amount||1})))):(this.stats={name:"Hero",health:100,maxHealth:100,gold:10,xp:0,level:1},this.equipment={weapon:{name:"Fists",damage:1,sprite:"fist.png",isDefault:!0}},this.inventory=[new e({name:"Bronze Longsword",damage:5,cost:25,sprite:"BronzeLongsword.png",amount:1})]),this.inventorySize=28,this.uiCallback=null}attack(t){const e=this.calculateLevelBonus(),a=this.calculateDamage(e);return t.takeDamage(a),a}calculateLevelBonus(){return this.stats.level*(2+Math.floor(3*Math.random()))}calculateDamage(t){const e=this.equipment.weapon.damage+t;return Math.floor(Math.random()*(e+1))}heal(){this.stats.health=this.stats.maxHealth}addItemToInventory(t){const e=this.inventory.find((e=>e.name===t.name));e?e.amount=(e.amount||1)+(t.amount||1):this.inventory.push({...t,amount:t.amount||1,getSellPrice:function(){return Math.floor(.5*this.cost)}}),this.updateUI()}sellItem(t){const e=this.inventory[t];if(e){const a=Math.floor(.75*e.cost);return this.stats.gold+=a,e.amount>1?e.amount--:this.inventory.splice(t,1),a}return 0}equipWeapon(t){const e=this.equipment.weapon;return this.equipment.weapon=t,this.uiCallback&&this.uiCallback.updateStats(),e}setUiCallback(t){this.uiCallback=t}checkLevelUp(){const t=50*this.stats.level;for(;this.stats.xp>=t;)this.levelUp(),this.updateUI()}levelUp(){this.stats.level++,this.stats.xp=this.stats.xp-50*(this.stats.level-1),this.stats.maxHealth+=20,this.stats.health=this.stats.maxHealth}getXpPercentage(){const t=50*this.stats.level;return this.stats.xp/t*100}addXp(t){this.stats.xp+=t,this.checkLevelUp(),this.updateUI()}goHome(){this.heal(),document.getElementById("homeTab")?.click()}updateUI(){this.uiCallback&&(this.uiCallback.updateStats&&this.uiCallback.updateStats(),this.uiCallback.updateInventory&&this.uiCallback.updateInventory())}saveGame(){const e=t.saveGame(this);return e&&console.log("Game saved successfully!"),e}addGold(t){console.log("DEBUG: Adding gold"),console.log("Current gold:",this.stats.gold),console.log("Adding:",t),this.stats.gold+=t,console.log("New total:",this.stats.gold),this.uiCallback&&this.uiCallback.updateStats()}}class s{constructor(t){this.player=t,this.items=a,this.ui=null}setUiCallback(t){this.ui=t}buyItem(t){const e=this.items[t];return!!this.canAfford(e)&&(this.processTransaction(e),this.updateUI(),!0)}canAfford(t){return this.player.stats.gold>=t.cost}processTransaction(t){this.player.stats.gold-=t.cost;const e=t.clone();this.player.addItemToInventory(e)}updateUI(){this.ui&&(this.ui.updateStats(),this.ui.updateShop())}}class i{constructor(t){this.player=t}render(t){const e=document.getElementById(t);e&&(e.innerHTML=`\n            <div class="inventory-grid">\n                ${this.createInventoryItems()}\n            </div>\n        `,this.setupEventListeners())}createInventoryItems(){return this.player.inventory.map(((t,e)=>`\n            <div class="inventory-item" data-index="${e}">\n                <div class="sprite-container">\n                    ${t.sprite?`\n                        <img src="./dist/afbeeldingen/${t.sprite}" alt="${t.name}">\n                        ${t.amount>1?`\n                            <span class="item-amount">${t.amount}</span>\n                        `:""}\n                    `:""}\n                </div>\n                <span class="item-name">${t.name}</span>\n            </div>\n        `)).join("")}setupEventListeners(){document.querySelectorAll(".inventory-item").forEach((t=>{t.addEventListener("click",(t=>{const e=t.currentTarget.dataset.index;this.handleItemClick(e)}))}))}handleItemClick(t){const e=this.player.inventory[t];if(e&&e.damage){const a={name:e.name,damage:e.damage,cost:e.cost,sprite:e.sprite,amount:1},n=this.player.equipment.weapon;e.amount>1?e.amount--:this.player.inventory.splice(t,1),this.player.equipWeapon(a),n&&!n.isDefault&&this.player.addItemToInventory(n),this.player.updateUI()}}}class o{constructor(t,e){this.shop=t,this.player=e}render(t){const e=document.getElementById(t);e&&(e.innerHTML=`\n            <div class="shop-container">\n                <div class="shop-header">\n                    <h2>Shop</h2>\n                    <div class="player-gold">Gold: ${this.player.stats.gold}</div>\n                </div>\n                \n                \x3c!-- Shop Section --\x3e\n                <h3>Buy Items</h3>\n                <div class="shop-content">\n                    ${this.createItemTable()}\n                </div>\n                \n                \x3c!-- Inventory Section --\x3e\n                <h3>Your Items (Click to sell)</h3>\n                <div class="inventory-section">\n                    ${this.createInventoryGrid()}\n                </div>\n            </div>\n        `,this.setupEventListeners())}createItemTable(){return`\n            <table class="shop-table">\n                <thead>\n                    <tr>\n                        <th>Item</th>\n                        <th>Damage</th>\n                        <th>Cost</th>\n                        <th>Action</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    ${this.shop.items.map((t=>`\n                        <tr>\n                            <td>\n                                <div class="item-cell">\n                                    <img src="./dist/afbeeldingen/${t.sprite}" alt="${t.name}">\n                                    <span>${t.name}</span>\n                                </div>\n                            </td>\n                            <td>${t.damage}</td>\n                            <td>${t.cost}</td>\n                            <td>\n                                <button class="buy-button" data-item="${t.name}" \n                                    ${this.player.stats.gold<t.cost?"disabled":""}>\n                                    Buy\n                                </button>\n                            </td>\n                        </tr>\n                    `)).join("")}\n                </tbody>\n            </table>\n        `}createInventoryGrid(){return`\n            <div class="inventory-grid">\n                ${this.player.inventory.map(((t,e)=>`\n                    <div class="inventory-item" data-index="${e}">\n                        <div class="sprite-container">\n                            <img src="./dist/afbeeldingen/${t.sprite}" alt="${t.name}">\n                            ${t.amount>1?`<span class="item-amount">${t.amount}</span>`:""}\n                        </div>\n                        <div class="sell-price">${t.getSellPrice()} gold</div>\n                    </div>\n                `)).join("")}\n            </div>\n        `}setupEventListeners(){document.querySelectorAll(".buy-button").forEach((t=>{t.addEventListener("click",(t=>{const e=t.target.dataset.item,a=this.shop.items.find((t=>t.name===e));a&&this.player.stats.gold>=a.cost&&(this.player.stats.gold-=a.cost,this.player.addItemToInventory(a.clone()),this.updateGame())}))})),document.querySelectorAll(".inventory-item").forEach((t=>{t.addEventListener("click",(t=>{const e=t.currentTarget.dataset.index,a=this.player.inventory[e];a&&(this.player.stats.gold+=a.getSellPrice(),a.amount>1?a.amount--:this.player.inventory.splice(e,1),this.updateGame())}))}))}updateGame(){this.render(document.querySelector('.tab:not([style*="none"])').id),this.shop.uiCallback&&this.shop.uiCallback.updateStats()}}class r{constructor(t){this.player=t}render(){this.updateStats(),this.updateHealthBar(),this.updateXpBar()}updateStats(){document.getElementById("goldDisplay").textContent=`Gold: ${this.player.stats.gold}`,document.getElementById("levelDisplay").textContent=`Level: ${this.player.stats.level}`;const t=document.getElementById("weaponDisplay"),e=document.getElementById("weaponSprite");t.textContent=`${this.player.equipment.weapon.name} (${this.player.equipment.weapon.damage} Damage)`,this.player.equipment.weapon.sprite&&(e.src=`./dist/afbeeldingen/${this.player.equipment.weapon.sprite}`,e.width=50,e.height=50,e.alt=this.player.equipment.weapon.name)}updateHealthBar(){const t=document.getElementById("healthBar"),e=this.player.stats.health/this.player.stats.maxHealth*100;t.style.width=`${e}%`,document.getElementById("healthPercentage").textContent=`${Math.floor(e)}% (${this.player.stats.health}/${this.player.stats.maxHealth})`}updateXpBar(){const t=document.getElementById("xpBar"),e=this.player.getXpPercentage();t.style.width=`${e}%`;const a=document.getElementById("xpPercentage"),n=50*this.player.stats.level;a.textContent=`${Math.floor(e)}% (${this.player.stats.xp}/${n} XP)`}static createStaticElements(){return'\n            <div class="stats-header">\n                <span id="goldDisplay"></span>\n                <span id="levelDisplay"></span>\n                <div class="stats-buttons">\n                    <button id="saveButton" class="game-button">Save Game</button>\n                    <button id="clearSaveButton" class="game-button warning">New Game</button>\n                </div>\n            </div>\n            <div id="statsContainer">\n                <div class="stats-header">\n                    <div id="goldDisplay"></div>\n                    <div id="levelDisplay"></div>\n                </div>\n                \n                <div id="weaponContainer">\n                    <div id="weaponDisplay"></div>\n                    <img id="weaponSprite" alt="weapon">\n                </div>\n                \n                <div class="bar-container">\n                    <label>Health:</label>\n                    <div id="healthBarContainer" class="progress-bar">\n                        <div id="healthBar" class="progress-fill health"></div>\n                        <span id="healthPercentage" class="progress-text"></span>\n                    </div>\n                </div>\n                \n                <div class="bar-container">\n                    <label>Experience:</label>\n                    <div id="xpBarContainer" class="progress-bar">\n                        <div id="xpBar" class="progress-fill xp"></div>\n                        <span id="xpPercentage" class="progress-text"></span>\n                    </div>\n                </div>\n            </div>\n        '}}class l{constructor(t,e,a){this.player=t,this.dungeons=e,this.combat=a,this.selectedDungeon=e[0]}render(t){const e=document.getElementById(t);e&&(e.innerHTML=this.createDungeonHTML(),this.setupEventListeners())}createDungeonHTML(){return`\n            <div class="dungeon-content">\n                <div class="dungeon-header">\n                    <h2>Select Dungeon:</h2>\n                    <select id="dungeonSelect">\n                        ${this.dungeons.map(((t,e)=>`\n                            <option value="${e}" ${t.name===this.selectedDungeon.name?"selected":""}>\n                                ${t.name}\n                            </option>\n                        `)).join("")}\n                    </select>\n                </div>\n                \n                <div class="monster-list">\n                    ${this.selectedDungeon.monsters.map((t=>`\n                        <div class="monster-container ${"boss"===t.type?"boss":""}">\n                            <img src="./dist/afbeeldingen/${t.sprite}.png" alt="${t.name}">\n                            <div class="monster-info">\n                                <h3>${t.name}</h3>\n                                <p>Level ${Math.floor(t.health/10)}</p>\n                                <p>Health: ${t.health}</p>\n                                <p>Damage: ${t.damage}</p>\n                                <p>Rewards: ${t.goldDrop} gold, ${t.xp} XP</p>\n                            </div>\n                            <button class="fight-button" data-monster="${t.name}">Fight!</button>\n                        </div>\n                    `)).join("")}\n                </div>\n            </div>\n        `}setupEventListeners(){const t=document.getElementById("dungeonSelect");t&&t.addEventListener("change",(t=>{const e=parseInt(t.target.value);this.selectedDungeon=this.dungeons[e],this.render("dungeonContainer")})),document.querySelectorAll(".fight-button").forEach((t=>{t.addEventListener("click",(t=>{const e=t.target.dataset.monster,a=this.selectedDungeon.monsters.find((t=>t.name===e));a&&this.combat.startCombat(a)}))}))}}class h{constructor(t){this.combat=t}render(t){this.originalContent=document.body.innerHTML;const e=document.createElement("div");e.id="combatOverlay",e.innerHTML=this.createCombatLayout(),document.body.appendChild(e),this.setupEventListeners(),this.update()}createCombatLayout(){return'\n            <div class="combat-fullscreen">\n                <div class="combat-header">\n                    \n                    <button id="fleeButton" class="flee-button">\n                        <img src="./dist/afbeeldingen/flee-icon.png" alt="Flee">\n                    </button>\n                </div>\n                \n                <div class="combat-scene">\n                    <div class="player-section">\n                        <div class="character-container">\n                            <img src="./dist/afbeeldingen/player.png" class="player-sprite">\n                            <div id="playerHealthBar" class="health-bar-container">\n                                <div class="health-bar"></div>\n                                <span class="health-percentage"></span>\n                            </div>\n                        </div>\n                    </div>\n                    \n                    <div class="battle-indicator">VS</div>\n                    \n                    <div class="monster-section">\n                        <div class="character-container">\n                            <img id="monsterSprite" src="" alt="Monster" class="monster-sprite">\n                            <div id="monsterHealthBar" class="health-bar-container">\n                                <div class="health-bar"></div>\n                                <span class="health-percentage"></span>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                \n                <div class="combat-controls">\n                    <button id="attackButton" class="attack-button">Attack!</button>\n                </div>\n                \n                <div id="combatLog" class="combat-log"></div>\n            </div>\n        '}exitCombat(){const t=document.getElementById("combatOverlay");t&&(t.classList.add("fade-out"),setTimeout((()=>{t.remove(),this.combat.stopCombat()}),500))}setupEventListeners(){document.getElementById("attackButton").addEventListener("click",(()=>{if(!this.combat.getCombatStatus().isActive){this.combat.resetCombat(),this.combat.startAutoCombat();const t=document.getElementById("combatLog");t&&(t.innerHTML=""),this.update()}})),document.getElementById("fleeButton").addEventListener("click",(()=>{this.combat.stopCombat(),this.exitCombat(),this.combat.player.goHome()}))}update(){const t=this.combat.getCombatStatus();this.updateHealthBars(t),this.updateSprites(),this.updateButtons(t)}updateHealthBars(t){const e=document.querySelector("#playerHealthBar .health-bar"),a=document.querySelector("#playerHealthBar .health-percentage"),n=t.playerHealth/t.playerMaxHealth*100;e.style.width=`${n}%`,a.textContent=`${t.playerHealth}/${t.playerMaxHealth}`;const s=document.querySelector("#monsterHealthBar .health-bar"),i=document.querySelector("#monsterHealthBar .health-percentage"),o=t.monsterHealth/t.monsterMaxHealth*100;s.style.width=`${o}%`,i.textContent=`${t.monsterHealth}/${t.monsterMaxHealth}`}updateSprites(){const t=document.getElementById("monsterSprite");t.src=`./dist/afbeeldingen/${this.combat.monster.sprite}.png`,t.width=50,t.height=50,t.alt=this.combat.monster.name}updateButtons(t){const e=document.getElementById("attackButton"),a=document.getElementById("fleeButton");e.disabled=t.isActive,a.disabled=!t.isActive}showHitSplat(t,e){const a=t===this.combat.player?"player-section":"monster-section",n=document.querySelector(`.${a}`);if(!n)return;const s=document.createElement("div");s.classList.add("hit-splat");const i=e>0?"red":"blue";s.innerHTML=`\n            <img src="./dist/afbeeldingen/hitsplat-${i}.png" alt="hitsplat">\n            <span>${Math.abs(e)}</span>\n        `;const o=40*(Math.random()-.5),r=40*(Math.random()-.5);s.style.transform=`translate(-50%, -50%) translate(${o}px, ${r}px)`,n.appendChild(s),setTimeout((()=>s.remove()),1e3)}showVictoryScreen(t,e){const a=document.getElementById("combatLog");if(!a)return;a.innerHTML=`\n            <div class="victory-message">\n                <h3>Victory!</h3>\n                <p>You gained ${t} XP</p>\n                ${this.createDropsList(e)}\n                <p>Click Attack to fight again or Flee to return!</p>\n            </div>\n        `;const n=document.getElementById("attackButton");n&&(n.disabled=!1)}createDropsList(t){return t&&Array.isArray(t)?`\n            <div class="drops-list">\n                <h4>Drops:</h4>\n                <ul>\n                    ${t.map((t=>`\n                        <li>${t.amount}x ${t.item.name}</li>\n                    `)).join("")}\n                </ul>\n            </div>\n        `:""}showDeathScreen(){const t=document.getElementById("combatLog");if(!t)return;t.innerHTML='\n            <div class="death-message">\n                <h3>You Died!</h3>\n                <p>You lost 25% of your gold and returned home.</p>\n                <p>Click Attack to try again or Flee to return!</p>\n            </div>\n        ';const e=document.getElementById("attackButton");e&&(e.disabled=!1)}}class d{constructor(t){this.player=t,this.monster=null,this.combatView=null,this.isActive=!1,this.combatInterval=null,this.currentButton=null}setCombatView(t){this.combatView=t}setMonster(t){this.monster=t,this.monster.respawn()}startCombat(t){this.isActive||(this.monster=t,this.monster.respawn(),this.isActive=!0,this.combatView&&(this.combatView.render("combatContainer"),this.startAutoCombat()))}startAutoCombat(){this.combatInterval||(this.isActive=!0,this.combatInterval=setInterval((()=>{if(!this.isActive)return void this.stopCombat();const t=this.calculatePlayerDamage();if(this.monster.takeDamage(t),this.combatView&&(this.combatView.showHitSplat(this.monster,t),this.combatView.update()),this.monster.isDead())return this.handleVictory(),void this.stopCombat();setTimeout((()=>{if(!this.isActive)return;const t=this.monster.dealDamage();return this.player.stats.health-=t,this.combatView&&(this.combatView.showHitSplat(this.player,t),this.combatView.update()),this.player.stats.health<=0?(this.handlePlayerDeath(),void this.stopCombat()):void 0}),400)}),800))}stopCombat(){this.combatInterval&&(clearInterval(this.combatInterval),this.combatInterval=null),this.isActive=!1}playerAttack(){if(!this.isActive)return;const t=this.calculatePlayerDamage();this.monster.takeDamage(t),this.combatView&&this.combatView.showHitSplat(this.monster,t),this.monster.isDead()?this.handleVictory():this.monsterAttack()}monsterAttack(){const t=this.monster.dealDamage();this.player.stats.health-=t,this.combatView&&this.combatView.showHitSplat(this.player,t),this.player.stats.health<=0&&this.handlePlayerDeath()}calculatePlayerDamage(){const t=this.player.equipment.weapon.damage||1,e=Math.floor(1.5*this.player.stats.level);return Math.floor(Math.random()*(t+e))}handleVictory(){this.stopCombat();const t=this.monster.goldDrop,e=this.player.stats.gold;console.log("DEBUG: Combat Victory"),console.log("Current gold:",e),console.log("Gold drop:",t),this.player.stats.gold=e+t,console.log("New gold total:",this.player.stats.gold),this.player.addXp(this.monster.xp),this.combatView&&this.combatView.showVictoryScreen(this.monster.xp,[{item:{type:"gold",name:"Gold"},amount:t}]),this.player.uiCallback&&this.player.uiCallback.updateStats()}handlePlayerDeath(){this.stopCombat();const t=this.player.stats.gold;console.log("DEBUG: Player Death"),console.log("Current gold:",t);const e=Math.floor(.75*t);this.player.stats.gold=e,console.log("Gold after penalty:",this.player.stats.gold),this.player.stats.health=this.player.stats.maxHealth,this.combatView&&this.combatView.showDeathScreen(),this.player.uiCallback&&this.player.uiCallback.updateStats()}handleDrops(t){t.forEach((t=>{if("gold"===t.item.type)this.player.stats.gold+=t.amount,console.log(`Added ${t.amount} gold`);else for(let e=0;e<t.amount;e++)this.player.addItemToInventory(t.item.clone())}))}isPlayerAlive(){return this.player.stats.health>0}isMonsterAlive(){return this.monster.health>0}getCombatStatus(){return{playerHealth:this.player.stats.health,playerMaxHealth:this.player.stats.maxHealth,monsterHealth:this.monster.health,monsterMaxHealth:this.monster.maxHealth,isActive:this.isActive}}resetCombat(){this.monster.health=this.monster.maxHealth,this.isActive=!0,this.player.stats.health<=0&&(this.player.stats.health=this.player.stats.maxHealth)}}class c{constructor(t){this.name=t.name,this.health=t.health,this.maxHealth=t.health,this.damage=t.damage,this.goldDrop=t.goldDrop,this.xp=t.xp,this.sprite=t.sprite,this.type=t.type||"normal",this.drops=t.drops||[]}takeDamage(t){return this.health=Math.max(0,this.health-t),this.health<=0}isDead(){return this.health<=0}dealDamage(){return Math.floor(Math.random()*(this.damage+1))}getHealthPercentage(){return this.health/this.maxHealth*100}respawn(){this.health=this.maxHealth}}const m=[{name:"Lumbridge Catacombs",monsters:[new c({name:"Giant Rat",health:25,damage:4,goldDrop:5,xp:10,sprite:"giant-rat",type:"normal"}),new c({name:"Skeleton",health:35,damage:6,goldDrop:8,xp:15,sprite:"skeleton",type:"normal"}),new c({name:"Zombie",health:40,damage:7,goldDrop:10,xp:20,sprite:"zombie",type:"normal"}),new c({name:"Cave Bug",health:20,damage:3,goldDrop:3,xp:8,sprite:"cave-bug",type:"normal"}),new c({name:"Cave Crawler",health:30,damage:5,goldDrop:6,xp:12,sprite:"cave-crawler",type:"normal"})]},{name:"Edgeville Dungeon",monsters:[new c({name:"Hobgoblin",health:50,damage:10,goldDrop:15,xp:30,sprite:"hobgoblin",type:"normal"}),new c({name:"Chaos Druid",health:60,damage:12,goldDrop:20,xp:40,sprite:"chaos-druid",type:"normal"}),new c({name:"Black Knight",health:80,damage:15,goldDrop:25,xp:50,sprite:"black-knight",type:"normal"}),new c({name:"Hill Giant",health:70,damage:14,goldDrop:18,xp:35,sprite:"hill-giant",type:"normal"}),new c({name:"Earth Warrior",health:90,damage:16,goldDrop:22,xp:45,sprite:"earth-warrior",type:"normal"})]},{name:"Taverley Dungeon",monsters:[new c({name:"Poison Scorpion",health:70,damage:14,goldDrop:20,xp:45,sprite:"poison-scorpion",type:"normal"}),new c({name:"Blue Dragon",health:150,damage:25,goldDrop:50,xp:100,sprite:"blue-dragon",type:"normal"}),new c({name:"Black Demon",health:200,damage:30,goldDrop:70,xp:150,sprite:"black-demon",type:"normal"}),new c({name:"Chaos Dwarf",health:80,damage:18,goldDrop:25,xp:50,sprite:"chaos-dwarf",type:"normal"}),new c({name:"Hellhound",health:120,damage:22,goldDrop:40,xp:80,sprite:"hellhound",type:"normal"})]},{name:"Brimhaven Dungeon",monsters:[new c({name:"Moss Giant",health:100,damage:18,goldDrop:30,xp:60,sprite:"moss-giant",type:"normal"}),new c({name:"Fire Giant",health:120,damage:22,goldDrop:40,xp:80,sprite:"fire-giant",type:"normal"}),new c({name:"Steel Dragon",health:250,damage:35,goldDrop:100,xp:200,sprite:"steel-dragon",type:"normal"}),new c({name:"Bronze Dragon",health:200,damage:30,goldDrop:80,xp:160,sprite:"bronze-dragon",type:"normal"}),new c({name:"Iron Dragon",health:220,damage:32,goldDrop:90,xp:180,sprite:"iron-dragon",type:"normal"})]},{name:"God Wars Dungeon",monsters:[new c({name:"General Graardor",health:300,damage:40,goldDrop:150,xp:300,sprite:"general-graardor",type:"boss"}),new c({name:"Kree'arra",health:350,damage:45,goldDrop:200,xp:400,sprite:"kree-arra",type:"boss"}),new c({name:"Commander Zilyana",health:320,damage:42,goldDrop:180,xp:360,sprite:"commander-zilyana",type:"boss"}),new c({name:"K'ril Tsutsaroth",health:340,damage:44,goldDrop:190,xp:380,sprite:"kril-tsutsaroth",type:"boss"})]},{name:"Elite Bosses",monsters:[new c({name:"Zulrah",health:800,damage:60,goldDrop:300,xp:600,sprite:"zulrah",type:"boss"}),new c({name:"Vorkath",health:900,damage:70,goldDrop:400,xp:800,sprite:"vorkath",type:"boss"}),new c({name:"The Nightmare",health:1e3,damage:80,goldDrop:500,xp:1e3,sprite:"the-nightmare",type:"boss"}),new c({name:"Kraken",health:1200,damage:90,goldDrop:600,xp:1200,sprite:"kraken",type:"boss"}),new c({name:"Cerberus",health:1500,damage:100,goldDrop:700,xp:1500,sprite:"cerberus",type:"boss"})]}];class p{constructor(t,e){this.player=t,this.shop=e,this.statsView=new r(t),this.inventoryView=new i(t),this.shopView=new o(e,t),this.combat=new d(t),this.combatView=new h(this.combat),this.dungeonView=new l(t,m,this.combat),t.setUiCallback({updateStats:()=>{this.statsView.render()},updateInventory:()=>{this.renderInventories()}}),this.combat.setCombatView(this.combatView),this.initializeLayout(),this.setupTabs(),this.switchTab("home")}renderInventories(){const t=document.getElementById("inventoryContainer"),e=document.getElementById("shopContainer");t&&this.inventoryView.render("inventoryContainer"),e&&!e.style.display&&this.shopView.render("shopContainer")}initializeLayout(){document.getElementById("statsContainer").innerHTML=r.createStaticElements();const e=document.getElementById("saveButton"),a=document.getElementById("clearSaveButton");e.addEventListener("click",(()=>{t.saveGame(this.player)?alert("Game saved successfully!"):alert("Failed to save game")})),a.addEventListener("click",(()=>{confirm("Are you sure you want to start a new game? This will delete your current progress.")&&(t.clearSave(),location.reload())}))}setupTabs(){const t=document.querySelectorAll("nav button");t.forEach((e=>{e.addEventListener("click",(a=>{t.forEach((t=>t.classList.remove("active"))),a.target.classList.add("active");const n=e.getAttribute("data-tab");this.switchTab(n)}))}))}switchTab(t){document.querySelectorAll(".tab").forEach((t=>{t.style.display="none"}));const e=document.getElementById(`${t}Container`);if(e){switch(e.style.display="block",t){case"home":this.inventoryView.render("inventoryContainer");break;case"dungeon":this.dungeonView.render("dungeonContainer");break;case"shop":this.shopView.render("shopContainer")}this.statsView.render()}}render(t){if(this.statsView.render(),document.getElementById(t))switch(t){case"inventoryContainer":this.inventoryView.render(t);break;case"shopContainer":this.shopView.render(t);break;case"dungeonContainer":this.dungeonView.render(t)}}startCombat(t){this.combat.setMonster(t),this.combatView.render("combatContainer")}showHitSplat(t,e){this.combatView.showHitSplat(t,e)}showVictoryScreen(t,e){this.combatView.showVictoryScreen(t,e),this.statsView.render()}showDeathScreen(){this.combatView.showDeathScreen(),this.statsView.render()}}document.addEventListener("DOMContentLoaded",(()=>{const t=new n,e=new s(t),a=new p(t,e);e.setUiCallback({updateStats:()=>a.statsView.render(),updateShop:()=>a.shopView.render("shopContainer")})}))})();